from aiogram import Router, F, Bot
from aiogram.types import Message, FSInputFile
from utils.plot_service import plot_price_chart, explain_chart, plot_crypto_chart_with_indicators
from utils.openai_service import get_ai_prediction
from utils.coingecko_service import get_historical_data
from utils.indicators import calculate_rsi, calculate_ema
from utils.news_service import get_latest_news
from datetime import datetime
import pandas as pd
from pathlib import Path
from keyboards import chart_keyboard


router = Router()


@router.message(F.text.startswith("/chart_ai"))
async def chart_ai_crypto(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chart_ai coin_id"""

    parts = message.text.strip().split()
    print(parts)
    if len(parts) < 2:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /chart_ai bitcoin', reply_markup=chart_keyboard.keyboard_ai)
        return

    coin_id = parts[1].lower().strip()

    await bot.send_chat_action(chat_id=message.chat.id, action="upload_photo")

    df = get_historical_data(coin_id, days=60)
    if df.empty or df is None:
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin_id}')
        return

    chart_path = plot_crypto_chart_with_indicators(df, coin_id)

    chart_file = Path(chart_path) if chart_path else None

    if chart_file and chart_file.exists():
        # with open(chart_file, "rb") as photo:
        photo = FSInputFile(chart_file)
        await message.answer_photo(photo, caption=f"–ì—Ä–∞—Ñ–∏–∫ {coin_id}", parse_mode="Markdown")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")

        golden_cross = df['signal'].eq(1).any()
        death_cross = df['signal'].eq(-1).any()

        if golden_cross or death_cross:
            pattern_text = ""
            if golden_cross:
                pattern_text += "–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '–∑–æ–ª–æ—Ç–æ–π –∫—Ä–µ—Å—Ç' (EMA14 –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA50 —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö).\n"
            if death_cross:
                pattern_text += "–¢–∞–∫–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '–º—ë—Ä—Ç–≤—ã–π –∫—Ä–µ—Å—Ç' (EMA14 –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA50 —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑).\n"

            prompt = (
                f"{pattern_text}\n"
                "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏ –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. "
                "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ –¥–µ–π—Å—Ç–≤–∏—é (–≤—Ö–æ–¥–∏—Ç—å, –¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç—å)."
            )

            await message.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—Ç—Ç–µ—Ä–Ω... –ñ–¥—É –ø–æ—è—Å–Ω–µ–Ω–∏—è –æ—Ç AI.")
            ai_response = await get_ai_prediction(prompt)
            await message.answer(
                f"üß† <b>AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É:</b>\n{ai_response}",
                parse_mode="HTML"
            )


        # answer_explain_chart = await explain_chart(coin_id)
        # await message.answer(f"–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≥—Ä–∞—Ñ–∏–∫—É –ø–æ {coin_id}\n\n{answer_explain_chart}", parse_mode="Markdown")

    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ {coin_id}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è.")



@router.message(F.text.startswith("/chart"))
async def chart_crypto(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chart coin_id"""

    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /chart bitcoin', reply_markup=chart_keyboard.keyboard)
        return

    coin_id = parts[1].lower().strip()

    await bot.send_chat_action(chat_id=message.chat.id, action="upload_photo")

    chart_path = plot_price_chart(coin_id)

    chart_file = Path(chart_path) if chart_path else None

    if chart_file and chart_file.exists():
        # with open(chart_file, "rb") as photo:
        photo = FSInputFile(chart_file)
        await message.answer_photo(photo, caption=f"–ì—Ä–∞—Ñ–∏–∫ {coin_id}", parse_mode="Markdown")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        answer_explain_chart = await explain_chart(coin_id)
        await message.answer(f"–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≥—Ä–∞—Ñ–∏–∫—É –ø–æ {coin_id}\n\n{answer_explain_chart}", parse_mode="Markdown")

    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ {coin_id}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è.")


@router.message(F.text.startswith("/timing"))
async def timing_crypto(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timing coin_id"""

    parts = message.text.strip().split()
    if len(parts) < 2:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ: /timing bitcoin', reply_markup=chart_keyboard.keyboard_timing)
        return

    coin_id = parts[1].lower().strip()

    df = get_historical_data(coin_id, days=60)
    if df.empty or df is None:
        await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {coin_id}')
        return

    df['RSI'] = calculate_rsi(df['price'], 14)
    df['EMA14'] = calculate_ema(df['price'], 14)
    df['EMA50'] = calculate_ema(df['price'], 50)

    last_rsi = df['RSI'].iloc[-1]
    last_ema14 = df['EMA14'].iloc[-1]
    last_ema50 = df['EMA50'].iloc[-1]

    last_date = df.index[-1] if isinstance(df.index, pd.DatetimeIndex) else df['date'].iloc[-1]
    if isinstance(last_date, pd.Timestamp):
        weekday = last_date.strftime('%A')
        date_str = last_date.strftime('%Y-%m-%d')
    else:
        weekday = str(last_date)
        date_str = str(last_date)

    news_titles = get_latest_news(coin_id, 5)
    news_text = '\n'.join([f'‚Äî {title}' for title in news_titles]) if news_titles else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º'


    prompt = (
        f"–°–µ–≥–æ–¥–Ω—è {weekday} ({date_str}). "
        f"–¢–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –º–æ–Ω–µ—Ç–µ {coin_id.upper()}:\n"
        f"- RSI(14): {last_rsi:.2f}\n"
        f"- EMA(14): {last_ema14:.2f}\n"
        f"- EMA(50): {last_ema50:.2f}\n"
        f"- –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: {news_text}\n"
        "\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π, –µ—Å—Ç—å –ª–∏ —Å–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è EMA, –∏ –∫–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ç–µ–∫—É—â–∏–º –º–æ–º–µ–Ω—Ç–æ–º –Ω–µ–¥–µ–ª–∏. "
        "–°—Ç–æ–∏—Ç –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–¥–µ–ª–∫—É —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å? –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞, –æ–±—ä—è—Å–Ω–∏ –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ. "
        "–ï—Å–ª–∏ –º–æ–∂–µ—à—å ‚Äî –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç (–≤—Ö–æ–¥–∏—Ç—å, –¥–µ—Ä–∂–∞—Ç—å, –∂–¥–∞—Ç—å, –∏–∑–±–µ–≥–∞—Ç—å —Å–¥–µ–ª–æ–∫)."
    )

    await bot.send_chat_action(chat_id=message.chat.id, action="typing")

    ai_answer = await get_ai_prediction(prompt, max_tokens=400)

    await message.answer(
        f"üß† <b>AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ç–∞–π–º–∏–Ω–≥—É –≤—Ö–æ–¥–∞:</b>\n{ai_answer}",
        parse_mode="HTML"
    )